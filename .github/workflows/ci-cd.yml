name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'serving/**'
      - 'ui/**'
      - '.github/workflows/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    env:
      HAS_KUBE: ${{ secrets.KUBE_CONFIG_DATA != '' }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - run: |
          pip install -r serving/requirements.txt
          pip install -r ui/requirements.txt
          pip install pytest flake8 black

      - run: flake8 serving ui
      - run: black --check serving ui
      - run: pytest serving/tests
      - run: pytest ui/tests

      - uses: docker/setup-buildx-action@v2

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/build-push-action@v5
        with:
          context: serving
          file: serving/Dockerfile
          push: true
          tags: ylou25/serving-api:latest

      - uses: docker/build-push-action@v5
        with:
          context: ui
          file: ui/Dockerfile
          push: true
          tags: ylou25/streamlit-ui:latest

      - name: check kube secret
        if: env.HAS_KUBE == 'true'
        run: echo "has kubeconfig"

      - uses: azure/setup-kubectl@v4
        if: env.HAS_KUBE == 'true'
        with:
          version: 'latest'

      - name: write kubeconfig
        if: env.HAS_KUBE == 'true'
        shell: bash
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 -d > $RUNNER_TEMP/kubeconfig
          echo "KUBECONFIG=$RUNNER_TEMP/kubeconfig" >> $GITHUB_ENV

      - name: patch kubeconfig
        if: env.HAS_KUBE == 'true'
        shell: bash
        run: |
          curl -L https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          KCONF="$KUBECONFIG"
          yq -i '.clusters[].cluster |= (. | del(.certificate-authority,.certificate-authority-data) + {"insecure-skip-tls-verify": true})' "$KCONF"
          yq -i '.users[].user     |= (. | del(.client-certificate,.client-certificate-data,.client-key,.client-key-data))' "$KCONF"

      - name: deploy serving-api
        if: env.HAS_KUBE == 'true'
        run: |
          kubectl set image deployment/serving-api serving-container=ylou25/serving-api:latest
          kubectl rollout status deployment/serving-api

      - name: deploy streamlit-ui
        if: env.HAS_KUBE == 'true'
        run: |
          kubectl set image deployment/streamlit-ui streamlit-container=ylou25/streamlit-ui:latest
          kubectl rollout status deployment/streamlit-ui
