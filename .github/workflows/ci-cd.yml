name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'serving/**'
      - 'ui/**'
      - '.github/workflows/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - run: |
          pip install -r serving/requirements.txt
          pip install -r ui/requirements.txt
          pip install pytest flake8 black

      - run: flake8 serving ui
      - run: black --check serving ui
      - run: pytest serving/tests
      - run: pytest ui/tests

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/build-push-action@v5
        with:
          context: serving
          file: serving/Dockerfile
          push: true
          tags: ylou25/serving-api:latest

      - uses: docker/build-push-action@v5
        with:
          context: ui
          file: ui/Dockerfile
          push: true
          tags: ylou25/streamlit-ui:latest

      - name: check kube secret
        id: kcfg
        run: |
          if [ -z "${{ secrets.KUBE_CONFIG_DATA }}" ]; then
            echo "has=false" >> $GITHUB_OUTPUT
          else
            echo "has=true" >> $GITHUB_OUTPUT
          fi

      - uses: azure/setup-kubectl@v4
        if: steps.kcfg.outputs.has == 'true'
        with:
          version: latest

      - name: write kubeconfig
        if: steps.kcfg.outputs.has == 'true'
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > $HOME/.kube/config

      - name: patch kubeconfig
        if: steps.kcfg.outputs.has == 'true'
        run: |
          sudo curl -L https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          KCONF=$HOME/.kube/config
          yq -i '(.clusters[].cluster |= (.insecure-skip-tls-verify=true) | del(.certificate-authority) | del(.certificate-authority-data))' $KCONF
          yq -i '(.users[].user |= (del(.client-certificate) | del(.client-key) | del(.client-certificate-data) | del(.client-key-data)))' $KCONF

      - name: deploy serving-api
        if: steps.kcfg.outputs.has == 'true'
        run: |
          kubectl set image deployment/serving-api serving-container=ylou25/serving-api:latest
          kubectl rollout status deployment/serving-api

      - name: deploy streamlit-ui
        if: steps.kcfg.outputs.has == 'true'
        run: |
          kubectl set image deployment/streamlit-ui streamlit-container=ylou25/streamlit-ui:latest
          kubectl rollout status deployment/streamlit-ui
